{
  "version": 3,
  "sources": ["../source/versionList.json", "../source/util.js", "../source/versionUpdates/29.0.0.js", "../source/versionUpdates/28.0.0.js", "../source/versionUpdates/26.0.0.js", "../source/versionUpdates/25.0.0.js", "../source/versionUpdates/24.0.0.js", "../source/versionUpdates/23.0.0.js", "../source/versionUpdates/22.0.0.js", "../source/updateFns.js", "../source/index.js", "../source/index_browser.js"],
  "sourcesContent": ["[\"29.0.0\",\"28.0.0\",\"26.0.0\",\"25.0.0\",\"24.0.0\",\"23.0.0\",\"22.0.0\"]", "// Utility functions used by other modules in this package.\n\n'use strict';\n\nconst VERSION_REGEX = /^lformsVersion: (.+)$/;\n\nmodule.exports = {\n  /**\n   *  Returns true if the given parsed JSON is a FHIR resource.\n   */\n  isFHIRResource: function (parsedJSON) {\n    return !!parsedJSON.resourceType;\n  },\n\n\n  /**\n   *  Finds extension arrays in the given structure, and calls the callback\n   *  for each array found, passing it as a parameter.\n   */\n  findExtensions: function (parsedJSON, callback) {\n    if (parsedJSON.extension)\n      callback(parsedJSON.extension);\n    let items = parsedJSON.item || parsedJSON.items; // \"items\" is the LForms format\n    if (items) {\n      for (let i of items)\n        this.findExtensions(i, callback);\n    }\n  },\n\n\n  /**\n   *  Finds the item by searching extension arrays in the given structure, and calls the callback\n   *  for each array found, passing the item as a parameter.\n   */\n  findItemByExtension: function (parsedJSON, callback) {\n    if (parsedJSON.extension)\n      callback(parsedJSON);\n    let items = parsedJSON.item || parsedJSON.items; // \"items\" is the LForms format\n    if (items) {\n      for (let i of items)\n        this.findItemByExtension(i, callback);\n    }\n  },\n\n\n  /**\n   *  Returns true if the first version is less than the second version.\n   *  Assumption: There are always three numeric parts in the version strings,\n   *  separated by periods.\n   * @param left the first version (left of the < operator).  This can be\n   *  undefined or null; in that case the return value is true.\n   * @param right the second version (right of the < operator)\n   */\n  versionLessThan: function (left, right) {\n    let rtn;\n    if (!left)\n      rtn = true; // unversioned case\n    else {\n      let leftParts = left.split('.');\n      let rightParts = right.split('.');\n      for (let i=0; i<3 && rtn === undefined; ++i) {\n        let lp = parseInt(leftParts[i]), rp = parseInt(rightParts[i]);\n        if (lp != rp)\n          rtn = lp < rp\n      }\n      if (rtn === undefined)\n        rtn = false;\n    }\n    return rtn;\n  },\n\n\n  /**\n   *  Returns a FHIR tag display string for a given LForms version string.\n   * @param lformsVersion The LForms SemVer string for which a tag is needed.\n   */\n  makeVersionTag: function (lformsVersion) {\n    return 'lformsVersion: '+lformsVersion;\n  },\n\n\n  /**\n   *  Returns the LForms SemVer version from the given FHIR tag object,\n   *  or null if the given tag string does not indicate an LForms version.\n   * @param tag A FHIR tag object\n   */\n  versionFromTag: function(tag) {\n    let rtn = null;\n    // Currently the version is on the \"code\" attribute, but originally it was\n    // on the \"display\" attribute, so we check both.\n    let versionStr = tag.code || tag.display;\n    let md = versionStr.match(VERSION_REGEX);\n    if (md)\n      rtn = md[1];\n    return rtn;\n  },\n\n\n  /**\n   *  Returns true if there is a LForms tag in the FHIR resource\n   * @param parsedJSON the updated resource\n   */\n  hasLformsTag(parsedJSON) {\n    if (parsedJSON.meta && parsedJSON.meta.tag) {\n      for (const tag of parsedJSON.meta.tag) {\n        if (tag.code && tag.code.match(VERSION_REGEX)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n", "'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the calculatedExpresion URI changed.  This\n  // affects both LForms definitions and Questionnaires.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) || parsedJSON.resourceType === 'Questionnaire') {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (let ext of extArray) {\n        if (ext.url === 'http://hl7.org/fhir/StructureDefinition/questionnaire-launchContext') {\n          ext.url = 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-launchContext';\n        }\n      }\n    });\n  }\n  return parsedJSON;\n};\n", "'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // If an observationLinkPeriod extension is used we add observationExtract\n  // This affects LForms and versioned Questionnaires\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) ||\n      (parsedJSON.resourceType === 'Questionnaire' && util.hasLformsTag(parsedJSON))) {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (const ext of extArray) {\n        // If the observationLinkPeriod is used then add the observationExtract extension too\n        if (ext.url === 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod') {\n          extArray.push({\n            url: 'http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationExtract',\n            valueBoolean: true\n          });\n          break;\n        }\n      }\n    });\n  }\n  \n  return parsedJSON;\n};\n", "'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version new defaults were provided for templateOptions to hide the header\n  // and the form controls. This only affects LForms.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON)) {\n    if (typeof parsedJSON.templateOptions === 'object') {\n      // If template options were specified we won't override them\n\n      if (parsedJSON.templateOptions.hideFormControls === undefined) {\n        parsedJSON.templateOptions.hideFormControls = false;\n      }\n\n      if (parsedJSON.templateOptions.showFormHeader === undefined) {\n        parsedJSON.templateOptions.showFormHeader = true;\n      }\n\n    } else {\n      // If template options were not specified then add the previous defaults\n      parsedJSON.templateOptions = {\n        hideFormControls: false,\n        showFormHeader: true\n      }\n    }\n  }\n\n  return parsedJSON;\n};\n", "'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the calculatedExpresion URI changed.  This\n  // affects both LForms definitions and Questionnaires.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) || parsedJSON.resourceType === 'Questionnaire') {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (let ext of extArray) {\n        if (ext.url === \"http://hl7.org/fhir/StructureDefinition/questionnaire-calculatedExpression\")\n          ext.url = \"http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-calculatedExpression\";\n      }\n    });\n  }\n  return parsedJSON;\n};\n", "'use strict';\n\nconst PATH_DELIMITER = \"/\";\n\n/**\n * Generate linkId from questionCode and replace questionCode in form controls\n * with linkId.\n * @param lfData a LForms form definition data object\n */\nfunction convertCodeToLinkId(lfData) {\n  _addLinkId(lfData.items, '', lfData);\n  _convertFormControls(lfData.items);\n  _removeTempFields(lfData.items)\n}\n\n/**\n * Remove the temporary fields created during the conversion\n * @param items a list of LForms items\n * @private\n */\nfunction _removeTempFields(items) {\n  // for each item on this level\n  for (var i = 0, iLen = items.length; i < iLen; i++) {\n    var item = items[i];\n    delete item._parentItem;\n    delete item._codePath;\n    // process the sub items\n    if (item.items && item.items.length > 0) {\n      _removeTempFields(item.items);\n    }\n  }\n}\n\n/**\n * Generate linkId from questionCode\n * @param items a list of LForms items\n * @param parentItemCodePath the codePath of the parent item\n * @param parentItem the parent item\n * @private\n */\nfunction _addLinkId(items, parentItemCodePath, parentItem) {\n\n  var iLen = items.length, prevSibling = null, itemId = 1;\n\n  // for each item on this level\n  for (var i = 0; i < iLen; i++) {\n    var item = items[i];\n\n    var questionRepeatable = item.questionCardinality && item.questionCardinality.max &&\n        (item.questionCardinality.max === \"*\" || parseInt(item.questionCardinality.max) > 1);\n\n    // id\n    if (questionRepeatable && prevSibling && prevSibling.questionCode === item.questionCode) {\n      itemId += 1;\n    } else {\n      itemId = 1;\n    }\n\n    // codePath as linkId\n    var codePath = parentItemCodePath + PATH_DELIMITER + item.questionCode;\n\n    item._parentItem = parentItem;\n    item._codePath = codePath;\n\n    // linkId for Questionnaire\n    if (!item.linkId) {\n      item.linkId = codePath;\n    }\n    // keep a reference to the previous item for checking repeating items.\n    prevSibling = item;\n\n    // process the sub items\n    if (item.items && item.items.length > 0) {\n      _addLinkId(item.items, codePath, item);\n    }\n  }\n}\n\n\n/**\n * Convert questionCode in all form controls (skip logic, data control, calculation method)\n * to linkId\n * @param items a list of LForms items\n * @private\n */\nfunction _convertFormControls(items) {\n\n  for(var i=0, iLen=items.length; i<iLen; i++) {\n    var item = items[i];\n    // convert code in skip logic to be linkId\n    if (item.skipLogic && item.skipLogic.conditions) {\n      for (var j = 0, jLen = item.skipLogic.conditions.length; j < jLen; j++) {\n        var condition = item.skipLogic.conditions[j];\n        var sourceItem = _findItemsUpwardsAlongAncestorTree(item, condition.source); // source is still a code\n        condition.source = sourceItem.linkId;\n      } // end of conditions loop\n    }\n\n    // convert code in dataControl to be linkId\n    if (item.dataControl) {\n      for (var j= 0, jLen=item.dataControl.length; j<jLen; j++) {\n        var source = item.dataControl[j].source;\n\n        // has a source configuration\n        if (source && (!source.sourceType || source.sourceType === \"INTERNAL\") &&\n            source.sourceItemCode) {\n          // get the source item object\n          var sourceItem = _findItemsUpwardsAlongAncestorTree(item, source.sourceItemCode);\n          if (!sourceItem) {\n            // This is an error in the form definition.  Provide a useful\n            // debugging message.\n            throw new Error(\"Data control for item '\"+item.question+ \"' refers to source item '\"+source.sourceItemCode+\n                \"' which was not found as a sibling, ancestor, or ancestor sibling.\");\n          }\n          source.sourceLinkId = sourceItem.linkId;\n          delete source.sourceItemCode;\n        }\n      }\n    }\n\n    // convert code in calculationMethod to be linkId\n    if (item.calculationMethod && item.calculationMethod.value && Array.isArray(item.calculationMethod.value)) {\n      var newValue = [];\n      for (var j= 0, jLen=item.calculationMethod.value.length; j<jLen; j++) {\n        var questionCode = item.calculationMethod.value[j];\n        var sourceItem = _findItemsUpwardsAlongAncestorTree(item, questionCode);\n        newValue.push(sourceItem.linkId);\n      }\n\n      item.calculationMethod.value = newValue;\n    }\n\n    if (item.items && item.items.length > 0) {\n      _convertFormControls(item.items);\n    }\n  }\n\n}\n\n\n/**\n * Search upwards along the tree structure to find the item with a matching questionCode\n * @param item the item to start with\n * @param questionCode the code of an item\n * @returns {}\n * @private\n */\nfunction _findItemsUpwardsAlongAncestorTree(item, questionCode) {\n  var sourceItem = null;\n\n  // check siblings\n  if (item._parentItem && Array.isArray(item._parentItem.items)) {\n    for (var i= 0, iLen= item._parentItem.items.length; i<iLen; i++) {\n      if (item._parentItem.items[i].questionCode === questionCode) {\n        sourceItem = item._parentItem.items[i];\n        break;\n      }\n    }\n  }\n  // check ancestors and each ancestors siblings\n  if (!sourceItem) {\n    var parentItem = item._parentItem;\n    while (parentItem) {\n      var foundSource = false;\n      // check the ancestor\n      if (parentItem.questionCode === questionCode) {\n        sourceItem = parentItem;\n        foundSource = true;\n      }\n      // check the ancestors siblings\n      else if (parentItem._parentItem && Array.isArray(parentItem._parentItem.items)){\n        var parentSiblings = parentItem._parentItem.items;\n        for (var i= 0, iLen= parentSiblings.length; i<iLen; i++) {\n          if (parentSiblings[i].questionCode === questionCode) {\n            sourceItem = parentSiblings[i];\n            foundSource = true;\n            break;\n          }\n        }\n      }\n      if (foundSource)\n        break;\n\n      parentItem = parentItem._parentItem;\n    }\n  }\n  return sourceItem;\n}\n\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @param parsedJSON either an LForms definition or a resource generated by\n *  LForms.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n\n  let util = require('../util');\n  // if it is LForms form data object\n  if (!util.isFHIRResource(parsedJSON) && parsedJSON.items) {\n    convertCodeToLinkId(parsedJSON);\n  }\n  return parsedJSON;\n};\n", "'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @param parsedJSON either an LForms definition or a resource generated by\n *  LForms.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the lformsVersion tag changed to have its value on the\n  // \"code\" field rather than the \"display\" field (because the HAPI FHIR server\n  // requires a \"code\" for tags).\n  let util = require('../util');\n  let meta = parsedJSON.meta;\n  if (meta) {\n    let tags = meta.tag;\n    if (tags) {\n      for (let t of tags) {\n        let version = util.versionFromTag(t);\n        if (version) {\n          // Move the version string from \"display\" to \"code\".  The index.js\n          // code will handle updating the version number.\n          if (t.display && !t.code) {\n            t.code = t.display;\n            delete t.display;\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  // In this version the extension in Questionnaire for answer repeats is removed, and replaced with repeats = true.\n  if (parsedJSON.resourceType === 'Questionnaire') {\n    util.findItemByExtension(parsedJSON, function (item) {\n      if (item.extension) {\n        for (let i=0; i< item.extension.length; i++) {\n          let ext = item.extension[i];\n          if (ext.url === \"http://hl7.org/fhir/StructureDefinition/questionnaire-answerRepeats\") {\n            item.repeats = true;\n            item.extension.splice(i, 1);\n            i = i - 1;\n          }\n        }\n      }\n    });\n  }\n\n  return parsedJSON;\n};\n", "'use strict';\n\n/**\n *  The update function for updating forms or resources to the version in this filename.\n * @return the updated form or resource.\n */\nmodule.exports = function (parsedJSON) {\n  // In this version, the observationLinkPeriod extension changed.  This\n  // affects both LForms definitions and Questionnaires.\n\n  let util = require('../util');\n  if (!util.isFHIRResource(parsedJSON) || parsedJSON.resourceType === 'Questionnaire') {\n    util.findExtensions(parsedJSON, function (extArray) {\n      for (let ext of extArray) {\n        if (ext.url === \"http://hl7.org/fhir/StructureDefinition/questionnaire-observationLinkPeriod\")\n          ext.url = \"http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod\";\n      }\n    });\n  }\n  return parsedJSON;\n};\n", "module.exports = {};\nmodule.exports['29.0.0'] = require('./versionUpdates/29.0.0.js');\nmodule.exports['28.0.0'] = require('./versionUpdates/28.0.0.js');\nmodule.exports['26.0.0'] = require('./versionUpdates/26.0.0.js');\nmodule.exports['25.0.0'] = require('./versionUpdates/25.0.0.js');\nmodule.exports['24.0.0'] = require('./versionUpdates/24.0.0.js');\nmodule.exports['23.0.0'] = require('./versionUpdates/23.0.0.js');\nmodule.exports['22.0.0'] = require('./versionUpdates/22.0.0.js');\n", "// Updates an LForms form definition or a FHIR resource generated by LForms,\n// to be compatible with the latest LForms version.\n\n'use strict';\n\n/**\n *  A list of all version numbers for which an update step is provided, in order\n *  from highest to lowest version number.\n */\nconst updateVersions_ = require('./versionList');\n\n/**\n *  A hash from an updateVersions_ entry to a function for performing that\n *  update step.  Each function takes the JSON for the resource to be updated.\n */\nconst updateFns_ = require('./updateFns');\n\n/**\n *  Updates an LForms form definition or a FHIR resource generated by LForms,\n *  to be compatible with the latest LForms version.\n * @param parsedJSON the parsed JSON containing the form\n *  definition or FHIR resource to be updated.\n * @param version (optional) the version to update to.  Updates for version\n *  numbers greater than this number will not be run.\n * @return the updated form definition or FHIR resource.\n */\nmodule.exports = {update: function (parsedJSON, version) {\n  let stopVersion = version;\n  let util = require('./util');\n  // Determine the lforms version\n  var isFHIR = util.isFHIRResource(parsedJSON);\n  var lformsVersion;\n  if (isFHIR) {\n    let meta = parsedJSON.meta;\n    if (meta) {\n      let tags = meta.tag;\n      if (tags) {\n        for (let t of tags) {\n          let tagVersion = util.versionFromTag(t);\n          if (tagVersion) {\n            lformsVersion = tagVersion;\n            break;\n          }\n        }\n      }\n    }\n  }\n  else { // an lforms form definition\n    lformsVersion = parsedJSON.lformsVersion;\n  }\n\n  // Determine which update steps need to run.\n  let updateSteps = [];\n  for (let i=0, len=updateVersions_.length, uv; i<len && (uv=updateVersions_[i]) &&\n       util.versionLessThan(lformsVersion, uv); ++i) {\n    if (!stopVersion || !util.versionLessThan(stopVersion, uv)) // stopVersion >= uv\n      updateSteps.push(uv);\n  }\n\n  let latestVersion = updateSteps[0];\n  for (let step of updateSteps.reverse()) // reverse changes the array in place\n    parsedJSON = updateFns_[step](parsedJSON);\n\n  // If we ran any of the updates, update the version tag\n  if (updateSteps.length) {\n    if (isFHIR) {\n      // Update or set the tag\n      let meta = parsedJSON.meta;\n      if (!meta)\n        meta = parsedJSON.meta = {};\n      let tags = meta.tag;\n      if (!tags)\n        tags = meta.tag = [];\n      let versionTag;\n      // for existing tags\n      for (let t of tags) {\n        let version = util.versionFromTag(t);\n        if (version) {\n          versionTag = t;\n          break;\n        }\n      }\n      let versionDisplay = util.makeVersionTag(latestVersion);\n      if (versionTag) {\n        versionTag.code = versionDisplay;\n        delete versionTag.display; // in case it was from the old version tag format\n      }\n      else\n        tags.push({code: versionDisplay});\n    }\n    else\n      parsedJSON.lformsVersion = latestVersion;\n  }\n\n  return parsedJSON;\n}};\n", "// To be used for browser-builds.  Defines lformsUpdater on window.\n\n'use strict';\n\nconst updater = require('./index');\nwindow.lformsUpdater = updater;\n"],
  "mappings": "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",
  "names": ["require_versionList", "__commonJSMin", "exports", "module", "require_util", "__commonJSMin", "exports", "module", "VERSION_REGEX", "parsedJSON", "callback", "items", "i", "left", "right", "rtn", "leftParts", "rightParts", "lp", "rp", "lformsVersion", "tag", "md", "require__", "__commonJSMin", "exports", "module", "parsedJSON", "util", "extArray", "ext", "require__", "__commonJSMin", "exports", "module", "parsedJSON", "util", "extArray", "ext", "require__", "__commonJSMin", "exports", "module", "parsedJSON", "require__", "__commonJSMin", "exports", "module", "parsedJSON", "util", "extArray", "ext", "require__", "__commonJSMin", "exports", "module", "PATH_DELIMITER", "convertCodeToLinkId", "lfData", "_addLinkId", "_convertFormControls", "_removeTempFields", "items", "i", "iLen", "item", "parentItemCodePath", "parentItem", "prevSibling", "itemId", "questionRepeatable", "codePath", "j", "jLen", "condition", "sourceItem", "_findItemsUpwardsAlongAncestorTree", "source", "newValue", "questionCode", "foundSource", "parentSiblings", "parsedJSON", "require__", "__commonJSMin", "exports", "module", "parsedJSON", "util", "meta", "tags", "t", "item", "i", "require__", "__commonJSMin", "exports", "module", "parsedJSON", "util", "extArray", "ext", "require_updateFns", "__commonJSMin", "exports", "module", "require_source", "__commonJSMin", "exports", "module", "updateVersions_", "updateFns_", "parsedJSON", "version", "stopVersion", "util", "isFHIR", "lformsVersion", "meta", "tags", "t", "tagVersion", "updateSteps", "i", "len", "uv", "latestVersion", "step", "versionTag", "versionDisplay", "updater"]
}

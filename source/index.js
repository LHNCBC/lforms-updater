// Updates an LForms form definition or a FHIR resource generated by LForms,
// to be compatible with the latest LForms version.

'use strict';

/**
 *  A list of all version numbers for which an update step is provided, in order
 *  from highest to lowest version number.
 */
const updateVersions_ = require('./versionList');

/**
 *  A hash from an updateVersions_ entry to a function for performing that
 *  update step.  Each function takes the JSON for the resource to be updated.
 */
const updateFns_ = {};
for (let v of updateVersions_)
  updateFns_[v] = require('./versionUpdates/'+v);


/**
 *  Updates an LForms form definition or a FHIR resource generated by LForms,
 *  to be compatible with the latest LForms version.
 * @param parsedJSON the parsed JSON containing the form
 *  definition or FHIR resource to be updated.
 * @param version (optional) the version to update to.  Updates for version
 *  numbers greater than this number will not be run.
 * @return the updated form definition or FHIR resource.
 */
module.exports = {update: function (parsedJSON, version) {
  let stopVersion = version;
  let util = require('./util');
  // Determine the lforms version
  var isFHIR = util.isFHIRResource(parsedJSON);
  var lformsVersion;
  if (isFHIR) {
    let meta = parsedJSON.meta;
    if (meta) {
      let tags = meta.tag;
      if (tags) {
        for (let t of tags) {
          let tagVersion = util.versionFromTag(t);
          if (tagVersion) {
            lformsVersion = tagVersion;
            break;
          }
        }
      }
    }
  }
  else { // an lforms form definition
    lformsVersion = parsedJSON.lformsVersion;
  }

  // Determine which update steps need to run.
  let updateSteps = [];
  for (let i=0, len=updateVersions_.length, uv; i<len && (uv=updateVersions_[i]) &&
       util.versionLessThan(lformsVersion, uv); ++i) {
    if (!stopVersion || !util.versionLessThan(stopVersion, uv)) // stopVersion >= uv
      updateSteps.push(uv);
  }

  let latestVersion = updateSteps[0];
  for (let step of updateSteps.reverse()) // reverse changes the array in place
    parsedJSON = updateFns_[step](parsedJSON);

  // If we ran any of the updates, update the version tag
  if (updateSteps.length) {
    if (isFHIR) {
      // Update or set the tag
      let meta = parsedJSON.meta;
      if (!meta)
        meta = parsedJSON.meta = {};
      let tags = meta.tag;
      if (!tags)
        tags = meta.tag = [];
      let versionTag;
      // for existing tags
      for (let t of tags) {
        let version = util.versionFromTag(t);
        if (version) {
          versionTag = t;
          break;
        }
      }
      let versionDisplay = util.makeVersionTag(latestVersion);
      if (versionTag) {
        versionTag.code = versionDisplay;
        delete versionTag.display; // in case it was from the old version tag format
      }
      else
        tags.push({code: versionDisplay});
    }
    else
      parsedJSON.lformsVersion = latestVersion;
  }

  return parsedJSON;
}};

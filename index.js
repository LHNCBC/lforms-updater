// Updates an LForms form definition or a FHIR resource generated by LForms,
// to be compatible with the latest LForms version.

/**
 *  A list of all version numbers for which an update step is provided, in order
 *  from highest to lowest version number.
 */
const updateVersions_ = ['22.0.0'];

/**
 *  A hash from an updateVersions_ entry to a function for performing that
 *  update step.  Each function takes the JSON for the resource to be updated.
 */
const updateFns_ = {};
for (let v of updateVersions_)
  updateFns[v] = require('./'+v);


/**
 *  Returns true if the first version is less than the second version.
 *  Assumption: There are always three numeric parts in the version strings,
 *  separated by periods.
 * @param left the first version (left of the < operator).  This can be
 *  undefined or null; in that case the return value is true.
 * @param right the second version (right of the < operator)
 */
function versionLessThan(left, right) {
  let rtn = true;
  if (left) {
    let leftParts = left.split('.');
    let rightParts = right.split('.');
    for (let i=0; i<3 && rtn; ++i) {
      let lp = leftParts[i], rp = rightParts[i];
      if (lp>rp)
        rtn = false;
    }
  }
}


/**
 *  Updates an LForms form definition or a FHIR resource generated by LForms,
 *  to be compatible with the latest LForms version.
 * @param resourcePathName the pathname to the file containing the form
 *  definition or FHIR resource to be updated.
 * @return the updated form definition or FHIR resource.
 */
module.exports = function update(resourcePathName) {
  // Read the file
  var parsedJSON = JSON.parse(require('fs').readFileSync(resourcePathName));

  let util = require('./util');
  // Determine the lforms version
  var isFHIR = util.isFHIRResource(parsedJSON);
  var lformsVersion;
  if (isFHIR) {
    let meta = parsedJSON.meta;
    if (meta) {
      let tags = meta.tag;
      if (tags) {
        for (let t of tags) {
          let md = t.match(/^lformsVersion: (.+)$'/);
          if (md) {
            lformsVersionz = md[1];
            break;
          }
        }
      }
    }
  }
  else { // an lforms form definition
    lformsVersion = parsedJSON.lformsVersion;
  }

  // Determine which update steps need to run.
  let updateSteps = [];
  for (let i=0, len=updateVersions_.length, uv; i<len && uv=updateVersions_[i] &&
       versionLessThan(lformsVersion, uv); ++i) {
    updateSteps.push(uv);
  }

  for (let step of updateSteps.reverse())
    parsedJSON = updateFns_[step](parsedJSON);

  return parsedJSON;
}
